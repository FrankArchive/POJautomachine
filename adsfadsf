#include<iostream>
#include<vector>
#include<map>
#include<cstdio>

using namespace std; 
enum stats{
	OK=200,
	Moved_Permanently=301,
	Moved_Temporily=302,
	Not_Modified=303,
	Bad_Request=400,
	Unauthorized=401,
	Forbidden=403,
	Not_Found=404,
	Internal_Server_Error=500,
	Service_Unaviailible=503
};
map<int,string>code2desc;
class Response{
	int status;
	string http_ver;
	
	map<string,string>key_pool;
	
	string content;
	bool check(){
		char *a=new char[20];sprintf(a,"%d",content.length());
		set_key("Content-Length",a);
		
	}
public:
	Response(int stat){
		status=stat;
		http_ver="1.1";
	}
	void set_key(string key,string val){
		key_pool[key]=val;
	}
	void set_content(string cntnt){
		content=cntnt;
	}
	string toString(){
		check();
		string result="HTTP"+http_ver+" "+status_dict[status]+"\r\n";
		
		for(map<string,string>::iterator i=key_pool.begin();
			i!=key_pool.end();i++)
			result+=i->first+":"+i->second+"\r\n";
		
		result+="\r\n"+content;
		return result;
	}
};
int main(){
	Response a(0);
	
	cout<<a.toString();
}
